//Find smallest range containing elements from k lists
import java.util.*;
class Node
{
	int ele;
	int i;
	int j;
	Node(int ele,int i,int j)
	{
		this.ele=ele;
		this.i=i;
		this.j=j;
	}
}
public class Solution 
{
	static PriorityQueue<Node> minheap  = new PriorityQueue<Node>(new Comparator<Node>(){
		public int compare(Node e1,Node e2)
		{
			return e1.ele-e2.ele;
		}
	});
	public static void findSmallestRange(int arr[][], int k)
	{
		int max=Integer.MIN_VALUE;
		
		int min=Integer.MAX_VALUE;
		
		int start=-1;
		
		int end=-1;
		
		int range=Integer.MAX_VALUE;
		
		for(int i=0;i<k;i++)
		{
			minheap.add(new Node(arr[i][0],i,0));
			max=Math.max(arr[i][0], max);
		}
		
		int n = arr[0].length;
		
		while(true)
		{
			Node root= minheap.remove();
			
			min = root.ele;
			
			if(range>max-min+1)
			{
				range=max-min+1;
				start=min;
				end=max;
			}
			
			if (root.j < n) { 
                root.ele = arr[root.i][root.j]; 
                root.j++; 
                if (root.ele > max) 
                    max = root.ele; 
            } 
            else
                break;
			minheap.add(new Node (root.ele,root.i,root.j));
		}
		System.out.println(start+" "+end);
	}
	public static void main(String[] args) 
	{
		int arr[][] = { { 4, 7, 9, 12, 15 }, 
                { 0, 8, 10, 14, 20 }, 
                { 6, 12, 16, 30, 50 } };; 
        int k = arr.length; 

        findSmallestRange(arr, k);
	}

}
