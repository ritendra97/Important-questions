import java.util.*;
class pair
{
	int value;
	int index;
	pair(int value,int index)
	{
		this.value=value;
		this.index=index;
	}
}
public class Solution 
{
	static int getMinDiff(int[] arr, int n, int k) 
    {
		ArrayList<pair> desiredheights = new ArrayList<pair>();
		
		for(int i=0;i<n;i++)
		{
			if(arr[i]-k>0)
				desiredheights.add(new pair(arr[i]-k,i));
			desiredheights.add(new pair(arr[i]+k,i));
		}
		
		Collections.sort(desiredheights,new Comparator<pair>() {
			public int compare(pair p1,pair p2)
			{
				return p1.value-p2.value;
			}
		});
		
		int ele  =0;
		int left =0;
		int right=0;
		int size =desiredheights.size();
		int ans = 0;
		
		int visited[] = new int[n];
		
	    while(ele<n && right<size)
	    {
	    	if(visited[desiredheights.get(right).index]==0)
	    		ele++;
	    	visited[desiredheights.get(right).index]++;
	    	right++;
	    }
	    
	    ans = (desiredheights.get(right-1).value-desiredheights.get(left).value);
	    
	    while(right<size)
	    {
	    	if(visited[desiredheights.get(left).index]==1)
	    		ele--;
	    	visited[desiredheights.get(left).index]--;
	    	left++;
	    	
	    	while(ele<n && right<size)
		    {
		    	if(visited[desiredheights.get(right).index]==0)
		    		ele++;
		    	visited[desiredheights.get(right).index]++;
		    	right++;
		    }
	    	if(ele==n)
	    	{
	    		ans = Math.min(ans, desiredheights.get(right-1).value-desiredheights.get(left).value);
	    	}
	    	else 
	    		break;
	    }
	    return ans;
    }   
	public static void main(String[] args) 
	{
		int arr[] = {3, 9, 12, 16, 20};
		int K = 3, N = 5;
		
		System.out.println(getMinDiff(arr,N,K));
	}
}
