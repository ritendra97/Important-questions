//Best Time to Buy and sell Stock
import java.util.*;
public class Solution 
{
	public static int BestSellTime(int prices[])
	{
		int lsf = Integer.MAX_VALUE;
		int max_profit_till_this_date = Integer.MIN_VALUE;
		int overall_max_profit = Integer.MIN_VALUE;
		
		for(int i=0;i<prices.length;i++)
		{	
			if(lsf>prices[i])
				lsf = prices[i];
			
			max_profit_till_this_date = prices[i]-lsf;
			
			if(overall_max_profit <max_profit_till_this_date)
				overall_max_profit=max_profit_till_this_date;
			
		}
		return overall_max_profit;
	}
	public static void main(String[] args) 
	{
		Scanner scn = new Scanner(System.in);
		
		System.out.print("Please Enter the size: ");
		int n = scn.nextInt();
		
		int prices[] = new int[n];
		
		for(int i =0;i<n;i++)
		{
			prices[i] = scn.nextInt();
		}
		
		System.out.println(BestSellTime(prices));
	}

}

class Solution 
{
    public int maxProfit(int[] prices) 
    {
        int t_i0=0;
        int t_i1=Integer.MIN_VALUE;
        for(int i = 0;i<prices.length;i++)
        {
            t_i0=Math.max(t_i0,t_i1+prices[i]);
            t_i1=Math.max(t_i1,-prices[i]);
                
        }
        return t_i0;
    }
}
class Solution {
    public int maxProfit(int[] prices) 
    {
        if(prices.length==0)
            return 0;
        int min=prices[0];
        int profit=0;
        for(int i=1;i<prices.length;i++)
        {
            if(prices[i]<=min)
            {
                min=prices[i];
            }
            if(prices[i]-min>profit)
                profit=prices[i]-min;
        }
        return profit;
    }
}
