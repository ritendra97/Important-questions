import java.util.*;
public class DynamicProgramming 
{
	public static int minCost(int costs[][], int N)
	{	
		int DP[][] = new int[N][N];
		
		DP[0][0]=costs[0][0];
		DP[0][1]=costs[0][1];
		DP[0][2]=costs[0][2];
		
		for(int i=1;i<N;i++)
		{
			DP[i][0] = costs[i][0]+Math.min(DP[i-1][1], DP[i-1][2]);
			DP[i][1] = costs[i][1]+Math.min(DP[i-1][0], DP[i-1][2]);
			DP[i][2] = costs[i][2]+Math.min(DP[i-1][0], DP[i-1][1]);
		}
		return  Math.min(DP[N-1][0],Math.min(DP[N-1][1], DP[N-1][2]));
	}
	public static void main(String[] args) 
	{
		int costs[][] = {{ 14, 2, 11 },
                         { 11, 14, 5 },
                         { 14, 3, 10 }};
		int N=3;
		
		System.out.println(minCost(costs,N));
	}
}
