//Maximum Subarray
// it is also based on prefix and suffix array
//O(n2)
simply take two loop and maintain curr_sum and max_sum;

// o(n) Solution
class Solution {
    public int maxSubArray(int[] nums) 
    {
        if(nums.length==1)
            return nums[0];
        int max_sum=nums[0];
        int curr_sum=nums[0];
        int n = nums.length;
        for(int i=1;i<n;i++)
        {
            if(curr_sum<0)
            {
                curr_sum=nums[i];
            }
            else
            {
                curr_sum+=nums[i];
            }
            max_sum = Math.max(max_sum,curr_sum);
        }
        return max_sum;
    }
}
// When they asked length

public class Solution 
{
	public static int maxSubArray(int[] nums) 
    {
        if(nums.length==1)
            return nums[0];
        int max_sum=nums[0];
        int curr_sum=nums[0];
        int n = nums.length;
        int start=0;
        int end=0;
        for(int i=1;i<n;i++)
        {
            if(curr_sum<0)
            {
            	start = i;
            	end =i;
                curr_sum=nums[i];
            }
            else
            {
                curr_sum+=nums[i];
            }
            if(max_sum<curr_sum)
            {
            	max_sum=curr_sum;
            	end=i;
            }
        }
        return end-start+1;
    }
	public static void main(String[] args) 
	{
		int arr[] = {-2,-3,-4,-1,-2,5,7};
		int n=arr.length;
		System.out.println(maxSubArray(arr));
	}
}
